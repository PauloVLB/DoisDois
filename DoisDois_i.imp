IMPLEMENTATION DoisDois_i
REFINES DoisDois
    
CONCRETE_CONSTANTS 
    ativa, removida, livre, STATUSCONTA
    
PROPERTIES
    ativa : NAT & removida : NAT & livre : NAT &
    ativa /= livre & ativa /= removida & removida /= livre &
    STATUSCONTA <: NAT
     
VALUES  
    maxConta = 50;
    maxCartao = 100;
    maxFatura = 100;
    maxTransacao = 200;
    CONTA = 0..maxConta;
    TRANSACAO = 0..maxTransacao;
    FATURA = 0..maxFatura;
    CARTAO = 0..maxCartao;
    taxaRendimento = 2;
    jurosFatura = 2; 
    maxParcelas = 10;
    limiteMaxPadrao = 15;
    saqueMinCorrente = 10;
    saqueMinPoupanca = 15;
    limitePix = 50;
    contaDummy = 0;
    cartaoDummy = 0;
    faturaDummy = 0;
    ativa = 1;
    removida = 2;
    livre = 0;
    STATUSCONTA = livre..removida
    
CONCRETE_VARIABLES
    i_contas, i_cartoes, i_faturas, i_transacoes,
    i_bloqueados, i_saldoCorrente, i_saldoPoupanca,
    i_valorTransacoes, i_tipoTransacoes, i_tipoCartao,
    i_limite, i_limiteMax, i_faturaOrdem,
    i_statusFatura, i_totalFatura, i_titular,
    i_faturaAtual, i_origem, i_destino, i_faturaCartao,
    tamFatura, tamTransacao, tamCredito,
    tamCartao, tamConta
INVARIANT

    i_contas: CONTA --> STATUSCONTA &
    contas = dom(i_contas |> {ativa}) &
    contasRemovidas = dom(i_contas |> {removida}) &
    
    i_cartoes : CARTAO --> BOOL &
    cartoes = dom(i_cartoes |> {TRUE}) &
    
    i_faturas : FATURA --> BOOL &
    faturas = dom(i_faturas |> {TRUE}) &
    
    i_transacoes : TRANSACAO --> BOOL &
    transacoes = dom(i_transacoes |> {TRUE}) &
    
    i_bloqueados : CARTAO --> BOOL &
    bloqueados = dom(i_bloqueados |> {TRUE}) &
    dom(i_bloqueados |> {TRUE}) <: cartoes &
    
    
    i_saldoCorrente : CONTA --> NAT &
    saldoCorrente = contas <| i_saldoCorrente &
    i_saldoPoupanca : CONTA --> NAT &
    saldoPoupanca = contas <| i_saldoPoupanca &
   
    i_origem : TRANSACAO --> CONTA &
    origemTransacoes = transacoes <| i_origem &
    i_destino : TRANSACAO --> CONTA &
    destinoTransacoes = transacoes <| i_destino &
    
    i_valorTransacoes : TRANSACAO --> NAT &
    i_tipoTransacoes : TRANSACAO --> TIPOTRANSACAO &
    valorTransacoes = transacoes <| i_valorTransacoes &
    tipoTransacoes  = transacoes <| i_tipoTransacoes &
    
    i_titular : CARTAO --> CONTA &
    titular = cartoes <| i_titular &
    
    i_tipoCartao : CARTAO --> TIPOCARTAO &
    tipoCartao = cartoes <| i_tipoCartao &
    
    i_limite    : CARTAO --> NAT &
    i_limiteMax : CARTAO --> NAT &
    limite = creditos <| i_limite &
    limiteMax = creditos <| i_limiteMax &
    
    i_statusFatura : FATURA --> STATUSFATURA &
    i_totalFatura : FATURA --> NAT &
    statusFatura = faturas <| i_statusFatura &
    totalFatura = faturas <| i_totalFatura &
   
    i_faturaAtual : CARTAO --> FATURA &
    creditos <| i_faturaAtual : CARTAO >+> FATURA &
    faturaAtual = creditos <| i_faturaAtual &
    
    i_faturaCartao: FATURA --> CARTAO &
    faturaCartao =  (faturas <| i_faturaCartao) |> creditos &
    
    i_faturaOrdem : FATURA --> NAT &
    faturaOrdem = faturas <| i_faturaOrdem &
    
    /*auxiliares*/
    tamFatura : NAT & tamFatura = card(faturas) &
    tamTransacao : NAT & tamTransacao = card(transacoes) &
    0..tamTransacao-1 = transacoes &
    tamCredito : NAT & tamCredito = card(creditos) &
    
    tamConta : NAT & tamConta = card(contas) + card(contasRemovidas) &
    tamCartao : NAT & tamCartao = card(cartoes) 
    
DEFINITIONS     
    creditos == (tipoCartao~[{credito}])            
    
INITIALISATION
    i_contas := CONTA*{livre};
    i_cartoes := CARTAO*{FALSE};
    i_faturas := FATURA*{FALSE};
    i_transacoes := TRANSACAO*{FALSE};
    i_saldoCorrente := CONTA*{0};
    i_saldoPoupanca := CONTA*{0};
    i_bloqueados := CARTAO*{FALSE};
    i_valorTransacoes := TRANSACAO*{0};
    // crime, mas só pensei nisso para não mexer na máquina
    i_tipoTransacoes := TRANSACAO*{depositoCorrente};
    i_tipoCartao := CARTAO*{debito};
    i_limite := CARTAO*{0};
    i_limiteMax := CARTAO * {limiteMaxPadrao};
    i_statusFatura := FATURA*{aberta};
    i_totalFatura := FATURA*{0};
    i_titular := CARTAO*{contaDummy};
    i_faturaAtual := CARTAO*{faturaDummy};
    i_origem := TRANSACAO*{contaDummy};
    i_destino := TRANSACAO*{contaDummy};
    i_faturaCartao := FATURA*{cartaoDummy};
    i_faturaOrdem := FATURA*{0};
    tamFatura := 0;
    tamTransacao := 0;
    tamCredito := 0;
    tamCartao := 0;
    tamConta := 0
    

OPERATIONS
ok <-- adicionarConta(cc) = 
    BEGIN
        VAR
           status
        IN
            status := i_contas(cc);   
            IF 
                cc <= maxConta & status = livre &
                cc /= contaDummy & tamConta < maxConta
            THEN
                i_contas(cc) := ativa;
                i_saldoCorrente(cc) := 0;
                i_saldoPoupanca(cc) := 0;
                tamConta := tamConta + 1;
                ok := TRUE
            ELSE
                ok := FALSE
            END
        END
        
    END;

ok <-- depositarCorrente(cc, valor) = 
    VAR 
        statusConta, saldoCorrente, maxSaldo
    IN
        statusConta := i_contas(cc);
        saldoCorrente := i_saldoCorrente(cc);
        maxSaldo := MAXINT - valor;
        IF 
            statusConta = ativa & saldoCorrente <= maxSaldo & cc /= contaDummy &
            tamTransacao <= maxTransacao
        THEN
            i_saldoCorrente(cc) := i_saldoCorrente(cc) + valor;
            i_transacoes(tamTransacao) := TRUE;
            i_origem(tamTransacao) := cc;
            i_destino(tamTransacao) := cc;
            i_valorTransacoes(tamTransacao) := valor;
            i_tipoTransacoes(tamTransacao) := depositoCorrente;
            tamTransacao := tamTransacao + 1;
            ok := TRUE
        ELSE
            ok := FALSE
        END
END;

ok <-- depositarPoupanca(cc, valor) = 
    VAR 
        statusConta, saldoPoupanca, maxSaldo
    IN
        statusConta := i_contas(cc);
        saldoPoupanca := i_saldoPoupanca(cc);
        maxSaldo := MAXINT - valor;
        IF 
            statusConta = ativa & saldoPoupanca <= maxSaldo & cc /= contaDummy &
            tamTransacao <= maxTransacao
        THEN
            i_saldoPoupanca(cc) := i_saldoPoupanca(cc) + valor;
            i_transacoes(tamTransacao) := TRUE;
            i_origem(tamTransacao) := cc;
            i_destino(tamTransacao) := cc;
            i_valorTransacoes(tamTransacao) := valor;
            i_tipoTransacoes(tamTransacao) := depositoPoupanca;
            tamTransacao := tamTransacao + 1;
            ok := TRUE
        ELSE
            ok := FALSE
        END
END;

ok <-- sacarCorrente(cc, valor) = 

    VAR 
        statusConta, saldoCorrente
    IN
        statusConta := i_contas(cc);
        saldoCorrente := i_saldoCorrente(cc);
        
        IF 
            statusConta = ativa & valor >= saqueMinCorrente &
            valor <= saldoCorrente & tamTransacao <= maxTransacao &
            valor >= 1 & cc /= contaDummy
        THEN
             i_saldoCorrente(cc) := i_saldoCorrente(cc) -  valor;
            i_transacoes(tamTransacao) := TRUE;
            i_origem(tamTransacao) := cc;
            i_destino(tamTransacao) := cc;
            i_valorTransacoes(tamTransacao) := valor;
            i_tipoTransacoes(tamTransacao) := saqueCorrente;
            tamTransacao := tamTransacao + 1; 
            ok := TRUE 
        ELSE
            ok := FALSE
        END
    END;
   
 
ok <-- sacarPoupanca(cc, valor) = 
    VAR 
        statusConta, saldoPoupanca, saldoCorrente, maxSaldo
    IN
        statusConta := i_contas(cc);
        saldoPoupanca := i_saldoPoupanca(cc);
        saldoCorrente := i_saldoCorrente(cc);
        maxSaldo := MAXINT - valor;
        
        IF 
            statusConta = ativa & valor >= saqueMinPoupanca &
            valor <= saldoPoupanca & tamTransacao <= maxTransacao &
            valor >= 1 & saldoCorrente <= maxSaldo & cc /= contaDummy
        THEN
            i_saldoPoupanca(cc) := i_saldoPoupanca(cc) -  valor;
            i_saldoCorrente(cc) := i_saldoCorrente(cc) + valor;
            i_transacoes(tamTransacao) := TRUE;
            i_origem(tamTransacao) := cc;
            i_destino(tamTransacao) := cc;
            i_valorTransacoes(tamTransacao) := valor;
            i_tipoTransacoes(tamTransacao) := saquePoupanca;
            tamTransacao := tamTransacao + 1;
            ok := TRUE
        ELSE
            ok := FALSE
        END
    END;    
  
    
ok <-- adicionarCartao(ct, tp, cc) =
    VAR 
        statusConta, statusCartao,
        cartaoDuplicado, temFatura
    IN 
        // verificar se conta é ativa e se cartão já foi adicionado
        statusConta := i_contas(cc) ;
        statusCartao := i_cartoes(ct);
        temFatura := bool(tp = debito or tamFatura < maxFatura);
        IF 
            statusCartao = FALSE & statusConta = ativa & temFatura = TRUE &
            cc /= contaDummy & ct /= cartaoDummy & tamCartao < maxCartao
        THEN
            cartaoDuplicado := FALSE;
            VAR ii IN
                ii := 0;
                
                WHILE 
                    ii <= maxCartao & cartaoDuplicado = FALSE 
                DO
                    VAR 
                        cartaoAtual, titularAtual, tipoAtual
                    IN
                        cartaoAtual := i_cartoes(ii);
                        titularAtual := i_titular(ii);
                        tipoAtual := i_tipoCartao(ii);

                        IF cartaoAtual = TRUE & titularAtual = cc & tipoAtual = tp 
                        THEN
                            cartaoDuplicado := TRUE
                        END
                    END;
                ii := ii + 1
                INVARIANT 
                    ii : NAT & ii <= (maxCartao + 1) &
                    i_cartoes : CARTAO --> BOOL &
                    i_titular : CARTAO --> CONTA &
                    i_faturas : FATURA --> BOOL &
                    i_tipoCartao : CARTAO --> TIPOCARTAO &
                    cartoes = dom(i_cartoes |> {TRUE}) &
                    (cartaoDuplicado = FALSE) => ((0..ii-1) /\ dom(i_cartoes |> {TRUE}) /\ i_tipoCartao~[{tp}] /\ i_titular~[{cc}] = {})
                VARIANT
                    (maxCartao + 1) - ii
                END
             END;
             
             
             IF 
                 cartaoDuplicado = FALSE
             THEN
                 i_cartoes(ct) := TRUE;
                 i_tipoCartao(ct) := tp;
                 i_titular(ct) := cc;
                 tamCartao := tamCartao + 1;               
                 ok := TRUE;
                 
                 IF 
                     tp = credito
                 THEN
                     VAR ii, atual IN
                        ii := 1; //desconsiderar dummy
                        atual := i_faturas(ii);
                    
                        WHILE ii < maxFatura & atual = TRUE DO
                            ii := ii + 1;
                            atual := i_faturas(ii)
                        INVARIANT 
                            ii : 1..maxFatura &
                            i_faturas : FATURA --> BOOL &
                            faturas = dom(i_faturas |> {TRUE}) &
                            i_faturaAtual : CARTAO --> FATURA &
                            creditos <| i_faturaAtual : CARTAO >+> FATURA &
                            (ii <= maxFatura => atual = i_faturas(ii)) &
                            (1..ii-1) <: dom(i_faturas |> {TRUE}) &
                            (atual = FALSE => (ii : FATURA & ii /: faturas))
                        VARIANT 
                            maxFatura - ii
                        END;
                    
                        i_faturas(ii) := TRUE;
                        tamFatura := tamFatura + 1;
                        i_faturaAtual(ct) := ii;
                        i_statusFatura(ii) := aberta;
                        i_totalFatura(ii) := 0;
                        i_faturaCartao(ii) := ct;
                        i_faturaOrdem(ii) := 0;
                        i_limite(ct) := limiteMaxPadrao;
                        i_limiteMax(ct) := limiteMaxPadrao;
                        tamCredito := tamCredito + 1
                      END
                 END
             ELSE
                 ok := FALSE
             END
         ELSE
             ok := FALSE
         END
     END;
                 
        
      
           
ok <-- removerCartao(ct) = 
    VAR 
        cartaoAtivo, tipoCartao, pagas
    IN 
        cartaoAtivo := i_cartoes(ct);
        tipoCartao := i_tipoCartao(ct);
        
       IF 
           cartaoAtivo = TRUE & tipoCartao = credito & ct /= cartaoDummy
       THEN
        
            VAR ii, fatura, faturaCartao, statusFatura, totalFatura
            IN 
                ii := 1; //desconsiderar dummy
                pagas := TRUE;
                WHILE ii <= maxFatura & pagas = TRUE DO
                    fatura := i_faturas(ii);
                    faturaCartao := i_faturaCartao(ii);
                    statusFatura := i_statusFatura(ii);
                    totalFatura := i_totalFatura(ii);
                    
                    IF fatura = TRUE & faturaCartao = ct & statusFatura /= paga & totalFatura /= 0
                    THEN 
                       pagas := FALSE
                    END;
                    ii := ii + 1
                INVARIANT
                    ii : 1..(maxFatura + 1) &
                    i_faturas : FATURA --> BOOL &
                    faturas = dom(i_faturas |> {TRUE}) &
                    i_faturaCartao : FATURA --> CARTAO &
                    i_statusFatura : FATURA --> STATUSFATURA &
                    i_totalFatura : FATURA --> NAT &
                    pagas = TRUE <=> (((1..ii-1) /\ dom(i_faturas |> {TRUE}) /\ dom(i_faturaCartao |> {ct})) <: dom(i_statusFatura |> {paga}) \/ dom(i_totalFatura |> {0}))
                VARIANT 
                    maxFatura - ii + 1
                END // WHILE
            END;
            
            IF 
                pagas = TRUE
                
            THEN
                
                 VAR ii, fatura, cartao IN
                    ii := 1;
                    
                    WHILE ii <= maxFatura DO
                        fatura := i_faturas(ii);
                        cartao := i_faturaCartao(ii);
                        IF 
                            fatura = TRUE & cartao = ct
                        THEN 
                            i_faturas(ii) := FALSE;
                            tamFatura := tamFatura - 1
                        END; // DO IF INTERNO
                        ii := ii + 1
                    INVARIANT
                        ii : 1..(maxFatura + 1) &
                        i_faturas : FATURA --> BOOL &
                        i_faturaCartao: FATURA --> CARTAO &
                        ((1..ii-1) /\ dom(i_faturaCartao |> {ct})) <: dom(i_faturas |> {FALSE})
                    VARIANT
                        maxFatura + 1 - ii
                    END 
                END;
                
                i_cartoes(ct) := FALSE;
                i_bloqueados(ct) := FALSE;  
                tamCredito := tamCredito - 1;
                tamCartao := tamCartao - 1
            END;
            ok := pagas    
        ELSIF 
            cartaoAtivo = TRUE & tipoCartao = debito
        THEN 
            i_cartoes(ct) := FALSE;
            i_bloqueados(ct) := FALSE;  
            tamCartao := tamCartao - 1; 
            ok := TRUE
        ELSE 
            ok := FALSE
        END
            
        END;


ok <-- pagarFatura(cc, ff) = 
    VAR 
        contaFatura, faturaAtiva, statusFatura, 
        totalFatura, saldo, cartao, titular
    IN 
        contaFatura := i_contas(cc);
        faturaAtiva := i_faturas(ff);
        statusFatura := i_statusFatura(ff);
        totalFatura := i_totalFatura(ff);
        saldo := i_saldoCorrente(cc);
        cartao := i_faturaCartao(ff);
        titular := i_titular(cartao);
        
        IF 
            contaFatura = ativa & faturaAtiva = TRUE &
            statusFatura /= paga & totalFatura > 0 &
            saldo >= totalFatura & titular = cc & 
            cc /= contaDummy & ff /= faturaDummy
        THEN
            i_saldoCorrente(cc) := i_saldoCorrente(cc) - totalFatura;
            i_statusFatura(ff) := paga;
            ok := TRUE
        ELSE
            ok := FALSE
        END
        
    END;

ok <-- compraParcelada(co, cd, valor, parcelas) = 
    VAR 
        cartaoAtivo, tipoCartao, contaDestino, cartaoBloqueado,
        titular, parcela, limite, saldoDestino, maxSaldo, resto
    IN
        cartaoAtivo := i_cartoes(co);
        tipoCartao := i_tipoCartao(co);
        contaDestino := i_contas(cd);
        cartaoBloqueado := i_bloqueados(co);
        titular := i_titular(co);
        saldoDestino := i_saldoCorrente(cd);
        limite := i_limite(co);
        maxSaldo := MAXINT - valor;
        resto := valor mod parcelas;
        
        IF 
            cartaoAtivo = TRUE & tipoCartao = credito & contaDestino = ativa &
            cartaoBloqueado = FALSE & titular /= cd & parcelas >= 1 & parcelas <= maxParcelas &
            valor > 0 & resto = 0 & saldoDestino <= maxSaldo &
            co /= cartaoDummy & cd /= contaDummy & tamTransacao <= maxTransacao
        THEN
            parcela := valor / parcelas;
            
            IF 
                parcela <= limite
            THEN
                VAR 
                    faturaAtualCartao, ordemAtual, overflow, 
                    faturasNecessarias, faturasExistentesCount, ordemFinal
                IN
                    faturaAtualCartao := i_faturaAtual(co);
                    ordemAtual := i_faturaOrdem(faturaAtualCartao);
                    overflow := FALSE;
                    faturasExistentesCount := 0;
                    ordemFinal := ordemAtual + parcelas - 1;
                    
                    /* Verifica overflow nas faturas existentes */
                    VAR ii, fatura, faturaCartao, faturaOrdem, totalFatura, maxValorFatura IN
                        ii := 1;
                        maxValorFatura := MAXINT - parcela;
                        WHILE ii <= maxFatura & overflow = FALSE DO
                            fatura := i_faturas(ii);
                            faturaCartao := i_faturaCartao(ii);
                            faturaOrdem := i_faturaOrdem(ii);
                            totalFatura := i_totalFatura(ii);
                            
                            IF 
                                fatura = TRUE & faturaCartao = co &
                                faturaOrdem >= ordemAtual & faturaOrdem <= ordemFinal
                            THEN
                                faturasExistentesCount := faturasExistentesCount + 1;
                                IF totalFatura > maxValorFatura THEN
                                    overflow := TRUE
                                END
                            END;
                            ii := ii + 1
                        INVARIANT
                            ii : 1..(maxFatura + 1) &
                            i_faturas : FATURA --> BOOL &
                            i_faturaCartao : FATURA --> CARTAO &
                            i_faturaOrdem : FATURA --> NAT &
                            i_totalFatura : FATURA --> NAT &
                            faturas = dom(i_faturas |> {TRUE}) &
                            faturasExistentesCount : NAT 
                        VARIANT
                            maxFatura + 1 - ii
                        END
                    END;
                    
                    faturasNecessarias := parcelas - faturasExistentesCount;
                    
                    VAR totalFaturasNecessarias IN
                        totalFaturasNecessarias := tamFatura + faturasNecessarias;
                        
                        IF 
                            overflow = FALSE & totalFaturasNecessarias <= maxFatura
                        THEN
                        /* Criar faturas necessárias */
                        VAR ordem, ordemInicial, ordemFinalCriacao IN
                            ordemInicial := ordemAtual + faturasExistentesCount;
                            ordemFinalCriacao := ordemAtual + parcelas;
                            ordem := ordemInicial;
                            WHILE ordem < ordemFinalCriacao DO
                                VAR ff, atual IN
                                    ff := 1;
                                    atual := i_faturas(ff);
                                    
                                    WHILE ff < maxFatura & atual = TRUE DO
                                        ff := ff + 1;
                                        atual := i_faturas(ff)
                                    INVARIANT 
                                        ff : 1..maxFatura &
                                        i_faturas : FATURA --> BOOL &
                                        faturas = dom(i_faturas |> {TRUE}) &
                                        (ff <= maxFatura => atual = i_faturas(ff)) &
                                        (1..ff-1) <: dom(i_faturas |> {TRUE}) &
                                        (atual = FALSE => (ff : FATURA & ff /: faturas))
                                    VARIANT 
                                        maxFatura - ff
                                    END;
                                    
                                    i_faturas(ff) := TRUE;
                                    i_faturaCartao(ff) := co;
                                    i_faturaOrdem(ff) := ordem;
                                    i_statusFatura(ff) := aberta;
                                    i_totalFatura(ff) := 0;
                                    tamFatura := tamFatura + 1
                                END;
                                ordem := ordem + 1
                            INVARIANT
                                ordem : ordemInicial..ordemFinalCriacao &
                                i_faturas : FATURA --> BOOL &
                                i_faturaCartao : FATURA --> CARTAO &
                                i_faturaOrdem : FATURA --> NAT &
                                i_statusFatura : FATURA --> STATUSFATURA &
                                i_totalFatura : FATURA --> NAT &
                                faturas = dom(i_faturas |> {TRUE})
                            VARIANT
                                ordemFinalCriacao - ordem
                            END
                        END;
                        
                        /* Distribuir parcelas nas faturas */
                        VAR ii, fatura, faturaCartao, faturaOrdem IN
                            ii := 1;
                            WHILE ii <= maxFatura DO
                                fatura := i_faturas(ii);
                                faturaCartao := i_faturaCartao(ii);
                                faturaOrdem := i_faturaOrdem(ii);
                                
                                IF 
                                    fatura = TRUE & faturaCartao = co &
                                    faturaOrdem >= ordemAtual & faturaOrdem <= ordemFinal
                                THEN
                                    i_totalFatura(ii) := i_totalFatura(ii) + parcela
                                END;
                                ii := ii + 1
                            INVARIANT
                                ii : 1..(maxFatura + 1) &
                                i_faturas : FATURA --> BOOL &
                                i_faturaCartao : FATURA --> CARTAO &
                                i_faturaOrdem : FATURA --> NAT &
                                i_totalFatura : FATURA --> NAT &
                                faturas = dom(i_faturas |> {TRUE})
                            VARIANT
                                maxFatura + 1 - ii
                            END
                        END;
                        
                        /* Criar transações */
                        VAR transacaoDestino, kk IN
                            /* Transação de depósito na conta destino */
                            transacaoDestino := tamTransacao;
                            i_transacoes(transacaoDestino) := TRUE;
                            i_origem(transacaoDestino) := titular;
                            i_destino(transacaoDestino) := cd;
                            i_valorTransacoes(transacaoDestino) := valor;
                            i_tipoTransacoes(transacaoDestino) := tranDepositoCartao;
                            tamTransacao := tamTransacao + 1;
                            
                            /* Transações de débito do cartão (uma para cada parcela) */
                            kk := 0;
                            WHILE kk < parcelas DO
                                i_transacoes(tamTransacao) := TRUE;
                                i_origem(tamTransacao) := titular;
                                i_destino(tamTransacao) := cd;
                                i_valorTransacoes(tamTransacao) := parcela;
                                i_tipoTransacoes(tamTransacao) := tranCredito;
                                tamTransacao := tamTransacao + 1;
                                kk := kk + 1
                            INVARIANT
                                kk : 0..parcelas &
                                i_transacoes : TRANSACAO --> BOOL &
                                i_origem : TRANSACAO --> CONTA &
                                i_destino : TRANSACAO --> CONTA &
                                i_valorTransacoes : TRANSACAO --> NAT &
                                i_tipoTransacoes : TRANSACAO --> TIPOTRANSACAO &
                                transacoes = dom(i_transacoes |> {TRUE})
                            VARIANT
                                parcelas - kk
                            END
                        END;
                        
                        /* Atualizar saldos e limite */
                        i_saldoCorrente(cd) := i_saldoCorrente(cd) + valor;
                        i_limite(co) := i_limite(co) - parcela;
                        
                        ok := TRUE
                    ELSE
                        ok := FALSE
                    END
                END
                END
            ELSE
                ok := FALSE
            END
        ELSE
            ok := FALSE
        END
    END;

ok <-- pix(co, cd, valor) = 
    VAR 
        contaOrigem, contaDestino, maxSaldo,
        saldoOrigem, saldoDestino
    IN
        contaOrigem := i_contas(co);
        contaDestino := i_contas(cd);
        saldoOrigem := i_saldoCorrente(co);
        saldoDestino := i_saldoCorrente(cd);
        maxSaldo := MAXINT - valor;
        
        IF 
            contaOrigem = ativa & contaDestino = ativa &
            valor >= 1 & valor <= saldoOrigem & saldoDestino <= maxSaldo &
            valor <= limitePix & co /= contaDummy & cd /= contaDummy &
            tamTransacao <= maxTransacao
        THEN
            i_saldoCorrente(co) := i_saldoCorrente(co) - valor;
            i_saldoCorrente(cd) := i_saldoCorrente(cd) + valor;
            
            i_transacoes(tamTransacao) := TRUE;
            i_origem(tamTransacao) := co;
            i_destino(tamTransacao) := cd;
            i_valorTransacoes(tamTransacao) := valor;
            i_tipoTransacoes(tamTransacao) := tranPix;
            tamTransacao := tamTransacao + 1;
            
            ok := TRUE
        ELSE
            ok := FALSE
        END
    END;


ok <-- compraDebito(co, cd, valor) = 
    VAR 
        contaDestino, cartaoAtivo, cartaoBloqueado,
        tipoCartao, titular, saldoOrigem, saldoDestino, maxSaldo
    IN
        contaDestino := i_contas(cd);
        cartaoAtivo := i_cartoes(co);
        cartaoBloqueado := i_bloqueados(co);
        tipoCartao := i_tipoCartao(co);
        titular := i_titular(co);
        saldoOrigem := i_saldoCorrente(co);
        saldoDestino := i_saldoCorrente(cd);
        maxSaldo := MAXINT - valor;
        
        IF 
            contaDestino = ativa & cartaoAtivo = TRUE &
            cartaoBloqueado = FALSE & tipoCartao = debito &
            titular /= cd & valor >= 1 & valor <= saldoOrigem & 
            saldoDestino <= maxSaldo & tamTransacao <= maxTransacao &
            co /= cartaoDummy & cd /= contaDummy
        THEN
            i_saldoCorrente(titular) := i_saldoCorrente(titular) - valor;
            i_saldoCorrente(cd) := i_saldoCorrente(cd) + valor;
            
            i_transacoes(tamTransacao) := TRUE;
            i_origem(tamTransacao) := titular;
            i_destino(tamTransacao) := cd;
            i_valorTransacoes(tamTransacao) := valor;
            i_tipoTransacoes(tamTransacao) := tranDebito;
            tamTransacao := tamTransacao + 1;
            
            ok := TRUE
        ELSE
            ok := FALSE
        END
        
    END;
         

ok <-- bloquearCartao(ct) = 
    VAR 
        cartaoAtivo, cartaoBloqueado
    IN
        cartaoAtivo := i_cartoes(ct);
        cartaoBloqueado := i_bloqueados(ct);
        
        IF 
            cartaoAtivo = TRUE & cartaoBloqueado = FALSE & ct /= cartaoDummy
        THEN
            i_bloqueados(ct) := TRUE;
            ok := TRUE
        ELSE
            ok := FALSE
        END
        
    END;

ok <-- desbloquearCartao(ct) = 
    VAR 
        cartaoAtivo, cartaoBloqueado
    IN
        cartaoAtivo := i_cartoes(ct);
        cartaoBloqueado := i_bloqueados(ct);
        
        IF 
            cartaoAtivo = TRUE & cartaoBloqueado = TRUE & ct /= cartaoDummy
        THEN
            i_bloqueados(ct) := FALSE;
            ok := TRUE
        ELSE
            ok := FALSE
        END
        
    END;

ok <-- atualizarLimiteMax(ct, valor) = 
    VAR 
        tipoCartao, cartaoBloqueado, cartaoAtivo
    IN
        cartaoAtivo := i_cartoes(ct);
        cartaoBloqueado := i_bloqueados(ct);
        tipoCartao := i_tipoCartao(ct);
        IF 
            cartaoAtivo = TRUE & cartaoBloqueado = FALSE & tipoCartao = credito &
            valor <= MAXINT & ct /= cartaoDummy
        THEN
            i_limiteMax(ct) := valor;
            VAR limiteAtual IN
                limiteAtual := i_limite(ct);
                IF limiteAtual > valor THEN
                    i_limite(ct) := valor
                END
            END;
            ok := TRUE
        ELSE
            ok := FALSE
        END
    END;

ok <-- atualizarLimite(ct, valor) = 
    VAR
        tipoCartao, cartaoBloqueado, cartaoAtivo, limiteMaxCartao
    IN
        tipoCartao := i_tipoCartao(ct);
        cartaoBloqueado := i_bloqueados(ct);
        cartaoAtivo := i_cartoes(ct);
        limiteMaxCartao := i_limiteMax(ct);
        IF 
            tipoCartao = credito & cartaoBloqueado = FALSE & cartaoAtivo = TRUE & 
            0 <= valor & valor <= limiteMaxCartao
        THEN
            ok := TRUE;
            i_limite(ct) := valor
        ELSE
            ok := FALSE
        END 
    END;

ok <-- removerConta(cc) =
    VAR
        statusConta, pagas
    IN
        statusConta := i_contas(cc);
        pagas := TRUE;
        
        IF
            statusConta = ativa & cc /= contaDummy
        THEN
            VAR ii, cartaoAtivo, titularCartao IN
                ii := 1;
                cartaoAtivo := i_cartoes(ii);
                titularCartao := i_titular(ii);
                WHILE ii <= maxCartao & pagas = TRUE DO
                    IF cartaoAtivo = TRUE & titularCartao = cc THEN
                        VAR jj, fatura, faturaCartao, statusFatura, totalFatura
                        IN 
                            jj := 1; 
                            pagas := TRUE;
                            WHILE jj <= maxFatura & pagas = TRUE DO
                                fatura := i_faturas(jj);
                                faturaCartao := i_faturaCartao(jj);
                                statusFatura := i_statusFatura(jj);
                                totalFatura := i_totalFatura(jj);
                                
                                IF fatura = TRUE & faturaCartao = ii & statusFatura /= paga & totalFatura /= 0
                                THEN 
                                    pagas := FALSE
                                END;
                                jj := jj + 1
                            INVARIANT
                                jj : 1..(maxFatura + 1) &
                                i_faturas : FATURA --> BOOL &
                                faturas = dom(i_faturas |> {TRUE}) &
                                i_faturaCartao : FATURA --> CARTAO &
                                i_statusFatura : FATURA --> STATUSFATURA &
                                i_totalFatura : FATURA --> NAT &
                                pagas = TRUE <=> (((1..jj-1) /\ dom(i_faturas |> {TRUE}) /\ dom(i_faturaCartao |> {ii})) <: dom(i_statusFatura |> {paga}) \/ dom(i_totalFatura |> {0}))
                            VARIANT 
                                maxFatura - jj + 1
                            END 
                        END
                    END;
                    ii := ii + 1
                INVARIANT
                    ii : NAT & ii <= (maxCartao + 1) &
                    i_cartoes : CARTAO --> BOOL &
                    i_titular : CARTAO --> CONTA &
                    i_faturas : FATURA --> BOOL &
                    i_tipoCartao : CARTAO --> TIPOCARTAO &
                    cartoes = dom(i_cartoes |> {TRUE})     
                VARIANT
                    maxCartao + 1 - ii
                END
            END;

            IF pagas = TRUE THEN
               i_contas(cc) := removida;
               VAR ii, cartaoAtivo, titularCartao IN
                    ii := 0;
                    cartaoAtivo := i_cartoes(ii);
                    titularCartao := i_titular(ii);
                    WHILE ii <= maxCartao DO
                        IF cartaoAtivo = TRUE & titularCartao = cc THEN
                            i_cartoes(ii) := FALSE;
                            i_bloqueados(ii) := FALSE;
                            VAR jj, faturaCartao
                            IN 
                                jj := 1; 
                                pagas := TRUE;
                                WHILE jj <= maxFatura DO
                                    faturaCartao := i_faturaCartao(jj);
                                    
                                    IF faturaCartao = ii 
                                    THEN 
                                        i_faturas(jj) := FALSE
                                    END;
                                    jj := jj + 1
                                INVARIANT
                                    jj : 1..(maxFatura + 1) &
                                    i_faturas : FATURA --> BOOL &
                                    faturas = dom(i_faturas |> {TRUE}) &
                                    i_faturaCartao : FATURA --> CARTAO 
                                VARIANT 
                                    maxFatura - jj + 1
                                END 
                            END
                        END;
                        ii := ii + 1
                    INVARIANT
                        ii : NAT & ii <= (maxCartao + 1) &
                        i_cartoes : CARTAO --> BOOL &
                        i_titular : CARTAO --> CONTA &
                        i_faturas : FATURA --> BOOL &
                        i_tipoCartao : CARTAO --> TIPOCARTAO &
                        cartoes = dom(i_cartoes |> {TRUE})     
                    VARIANT
                        maxCartao + 1 - ii
                    END
                END
            ELSE
                ok :=  FALSE
            END
        ELSE
            ok := FALSE
        END
    END;

ok <-- passarMes = 
    VAR 
        poupancaPassou, faturaPassou,
        copiaSaldoPoupanca, copiaTotalFatura,
        proximasFaturas, cartoesComProxima, faturasNecessarias
    IN
        poupancaPassou := TRUE;
        
        copiaSaldoPoupanca := i_saldoPoupanca;
        /* verifica se aplicar rendimento gera overflow */
        VAR
            ii, contaAtual, saldoAtual, limite
        IN
            ii := 0;
            saldoAtual := 0;
            WHILE ii <= maxConta & poupancaPassou = TRUE DO
                contaAtual := i_contas(ii);
                saldoAtual := copiaSaldoPoupanca(ii);
                limite := MAXINT/taxaRendimento;
                
                IF 
                    contaAtual = ativa & saldoAtual > limite 
                THEN
                    poupancaPassou := FALSE
                ELSE
                    copiaSaldoPoupanca(ii) := i_saldoPoupanca(ii) * taxaRendimento
                END;
                ii := ii + 1
            INVARIANT
                ii : 0..(maxConta + 1) &
                i_contas: CONTA --> STATUSCONTA &
                contas = dom(i_contas |> {ativa}) &
                i_saldoPoupanca : CONTA --> NAT &
                saldoPoupanca = contas <| i_saldoPoupanca &
                copiaSaldoPoupanca : CONTA --> NAT &
                !cc.(cc : ((0..ii-1) /\ dom(i_contas |> {ativa})) & i_saldoPoupanca(cc) <= MAXINT/taxaRendimento => copiaSaldoPoupanca(cc) = (i_saldoPoupanca(cc) * taxaRendimento)) &
                (poupancaPassou = TRUE <=> (ran(dom(((0..ii-1) <| i_contas) |> {ativa}) <| i_saldoPoupanca) <: 0..(MAXINT/taxaRendimento)))
                
            VARIANT
                maxConta + 1 - ii
            END
        END; // var de poup
        
        IF 
            poupancaPassou = TRUE
        THEN
        /* verifica se aplicar juros gera overflow e se existe proxima fatura para cartoes*/
            faturaPassou:= TRUE;
            proximasFaturas := CARTAO * {faturaDummy};
            copiaTotalFatura := i_totalFatura;
            cartoesComProxima := 0;
            VAR 
                ii, atual, cartaoFatura, faturaAtualCartao, 
                ordemAtual, ordemFaturaAtual, statusFaturaAtual,
                totalFaturaAtual, maxJuros, proximaOrdem
            IN
                ii := 1;
                WHILE ii <= maxFatura & faturaPassou = TRUE DO
                    atual := i_faturas(ii);
                    
                    IF 
                        atual = TRUE
                    THEN
                        cartaoFatura := i_faturaCartao(ii);
                        faturaAtualCartao := i_faturaAtual(cartaoFatura);
                        
                        ordemAtual := i_faturaOrdem(ii);
                        ordemFaturaAtual := i_faturaOrdem(faturaAtualCartao);
                        proximaOrdem := ordemFaturaAtual + 1;
                        statusFaturaAtual := i_statusFatura(ii);
                        
                        totalFaturaAtual := i_totalFatura(ii);
                        maxJuros := MAXINT/jurosFatura;
                        
                        IF 
                            ordemAtual <= ordemFaturaAtual &
                            (statusFaturaAtual = aberta or statusFaturaAtual = vencida)
                            
                        THEN
                            IF 
                                totalFaturaAtual > maxJuros
                            THEN
                                faturaPassou := FALSE
                            ELSE
                                copiaTotalFatura(ii) := copiaTotalFatura(ii) * jurosFatura
                            END
                        END;
                        
                        /* verifica se tem próxima fatura*/
                         IF 
                             ordemAtual = proximaOrdem 
                         THEN
                              proximasFaturas(cartaoFatura) := ii;
                              cartoesComProxima := cartoesComProxima + 1
                         END     
                    END;       
                    ii := ii + 1
                INVARIANT
                    ii : 1..(maxFatura + 1) &
                    i_faturas : FATURA --> BOOL &
                    faturas = dom(i_faturas |> {TRUE}) &
                    i_faturaAtual : CARTAO --> FATURA &
                    i_faturaCartao: FATURA --> CARTAO &
                    i_faturaOrdem : FATURA --> NAT &
                    i_statusFatura : FATURA --> STATUSFATURA &
                    i_totalFatura : FATURA --> NAT &
                    totalFatura = faturas <| i_totalFatura &
                    copiaTotalFatura : FATURA --> NAT &
                    proximasFaturas : CARTAO --> FATURA &
                    cartoesComProxima : NAT &
                    !cc.(cc : ((1..ii-1) /\ dom(i_faturas |> {TRUE})) & i_totalFatura(cc) <= MAXINT/jurosFatura => copiaTotalFatura(cc) = (i_totalFatura(cc) * jurosFatura)) &
                    (faturaPassou = TRUE <=> (!ff.((ff : ((1..ii-1)  /\ dom(i_faturas |> {TRUE})) & i_faturaOrdem(ff) <=        i_faturaOrdem(i_faturaAtual(i_faturaCartao(ff))) & (i_statusFatura(ff) : {vencida, aberta})) 
                => i_totalFatura(ff) * jurosFatura <= MAXINT))) &
       { ff | ff : (1 .. ii - 1) & i_faturas(ff) = TRUE & i_faturaOrdem(ff) = i_faturaOrdem(i_faturaAtual(i_faturaCartao(ff))) + 1 } <:  ran(proximasFaturas |>> {faturaDummy}) &
           cartoesComProxima = card(proximasFaturas |>> {faturaDummy})
  
                VARIANT
                    maxFatura + 1 - ii
                END
            END; //var de fatura
            
            faturasNecessarias := tamFatura + (tamCredito - cartoesComProxima);
            
            IF 
                faturasNecessarias <= maxFatura
            THEN
                VAR
                    ii, cartaoAtivo, tipoAtual, faturaAtualCartao,
                    statusAtual, totalAtual, ff, atual, ordemAtual, 
                    proximaFatura
                IN
                    ii := 0;
                    
                    WHILE ii <= maxCartao DO
                        cartaoAtivo := i_cartoes(ii);
                        tipoAtual := i_tipoCartao(ii);
                        
                        IF
                            cartaoAtivo = TRUE & tipoAtual = credito
                        THEN
                            faturaAtualCartao := i_faturaAtual(ii);
                            statusAtual := i_statusFatura(faturaAtualCartao);
                            totalAtual := i_totalFatura(faturaAtualCartao);
                            
                            IF
                                statusAtual = aberta & totalAtual > 0
                            THEN
                                i_statusFatura(faturaAtualCartao) := vencida
                            ELSIF
                                statusAtual = aberta & totalAtual = 0
                            THEN
                                i_statusFatura(faturaAtualCartao) := paga
                            END;
                            
                            proximaFatura := proximasFaturas(ii);
                            
                            IF
                               proximaFatura = faturaDummy
                            THEN
                                ff := 1;
                                atual := i_faturas(ff);
                                
                                WHILE ff < maxFatura & atual = TRUE DO
                                    ff := ff + 1;
                                    atual := i_faturas(ff)
                                INVARIANT 
                                    ff : 1..maxFatura &
                                    i_faturas : FATURA --> BOOL &
                                    faturas = dom(i_faturas |> {TRUE}) &
                                    i_faturaAtual : CARTAO --> FATURA &
                                    (ff <= maxFatura => atual = i_faturas(ff)) &
                                    (1..ff-1) <: dom(i_faturas |> {TRUE}) &
                                    (atual = FALSE => (ff : FATURA & ff /: faturas))
                                VARIANT 
                                    maxFatura - ff
                                END;
                                
                                ordemAtual := i_faturaOrdem(faturaAtualCartao);
                                
                                i_faturas(ff) := TRUE;
                                i_faturaCartao(ff) := ii;  
                                i_faturaAtual(ii) := ff;
                                i_faturaOrdem(ff) := ordemAtual + 1;
                                i_statusFatura(ff) := aberta;
                                copiaTotalFatura(ff) := 0;
                                tamFatura := tamFatura + 1
                            ELSE
                                i_faturaAtual(ii) := proximaFatura
                            END
                         END;
                        
                        ii := ii + 1
                    INVARIANT
                        ii : 0..(maxCartao + 1) &
                        i_cartoes : CARTAO --> BOOL &
                        cartoes = dom(i_cartoes |> {TRUE}) &
                        i_faturas : FATURA --> BOOL &
                        faturas = dom(i_faturas |> {TRUE}) &
                        i_statusFatura : FATURA --> STATUSFATURA &
                        i_totalFatura : FATURA --> NAT &
                        statusFatura = faturas <| i_statusFatura &
                        totalFatura = faturas <| i_totalFatura &
                        i_faturaAtual : CARTAO --> FATURA &
                        creditos <| i_faturaAtual : CARTAO >+> FATURA &
                        faturaAtual = creditos <| i_faturaAtual &
                        i_faturaCartao: FATURA --> CARTAO &
                        faturaCartao =  (faturas <| i_faturaCartao) |> creditos &
                        i_faturaOrdem : FATURA --> NAT &
                        faturaOrdem = faturas <| i_faturaOrdem  
                    VARIANT
                        maxCartao + 1 - ii
                    END
                END; // var de cartoes
                
                i_saldoPoupanca := copiaSaldoPoupanca;
                i_totalFatura := copiaTotalFatura;
                ok := TRUE
            ELSE
                ok := FALSE
            END
            
        ELSE
            ok := FALSE
       END 
    END;


ccs <-- consultarContas = 
    VAR ii IN
        ii := 0;
        ccs := (0..maxConta)*{FALSE};
        WHILE ii <= maxConta DO
            VAR atual IN atual := i_contas(ii);
            IF 
                atual = ativa
            THEN
                ccs(ii) := TRUE
            END;
            ii := ii + 1
            END
        INVARIANT
            ii : 0..(maxConta+1) &
            i_contas : (0..maxConta) --> STATUSCONTA &
            contas = dom(i_contas |> {ativa}) &
            ccs : (0..maxConta) --> BOOL &
            dom(ccs |> {TRUE}) = ((0..ii-1) /\ dom(i_contas |> {ativa}))
        VARIANT
            maxConta - ii + 1
        END
    END;

sc, sp, ok <-- consultarSaldos(cc) = 
    VAR 
        statusConta
    IN
        statusConta := i_contas(cc);
        
        IF 
            statusConta = ativa & cc /= contaDummy
        THEN
            sc := i_saldoCorrente(cc);
            sp := i_saldoPoupanca(cc);
            ok := TRUE
        ELSE
            sc := 0; 
            sp := 0;
            ok := FALSE
        END  
    END;
   
hh, ok <-- historico(cc) = 
    VAR 
        statusConta
    IN
        hh := (0..maxTransacao)*{FALSE};
        statusConta := i_contas(cc);
        
        IF 
            statusConta = ativa & cc /= contaDummy 
        THEN
            
             VAR ii IN
                ii := 0;
                WHILE ii <= maxTransacao DO
                    VAR 
                        atual, origem, destino, tipo 
                    IN 
                        atual := i_transacoes(ii);
                        origem := i_origem(ii);
                        destino := i_destino(ii);
                        tipo := i_tipoTransacoes(ii);
                        
                        IF
                            atual = TRUE & 
                            ((origem = cc & tipo /= tranDepositoCartao) or (destino = cc & tipo /= tranCredito))
                        THEN
                            hh(ii) := TRUE
                        END;
                        
                        ii := ii + 1
                    END
                INVARIANT
                    ii : 0..(maxTransacao + 1) &
                    i_transacoes : TRANSACAO --> BOOL &
                    i_origem : TRANSACAO --> CONTA &
                    i_destino : TRANSACAO --> CONTA &
                    i_tipoTransacoes : TRANSACAO --> TIPOTRANSACAO &
                    hh : 0..maxTransacao --> BOOL &
                    dom(hh |> {TRUE}) = ((0..ii-1) /\ dom(i_transacoes |> {TRUE}) /\ 
                    ((i_origem~[{cc}] - i_tipoTransacoes~[{tranDepositoCartao}]) \/
                    (i_destino~[{cc}] - i_tipoTransacoes~[{tranCredito}])))
                    
                VARIANT
                    maxTransacao - ii + 1
                END
               
            END;
            ok := TRUE
        ELSE
            ok := FALSE
        END
        
    END;
    
    
ok, oo, dd, vv, tp <-- consultarTransacao(tt) = 
    VAR 
        transacaoAtiva 
    IN
        transacaoAtiva := i_transacoes(tt);
        
        IF 
            transacaoAtiva = TRUE
        THEN
            oo := i_origem(tt);
            dd := i_destino(tt);
            vv := i_valorTransacoes(tt);
            tp := i_tipoTransacoes(tt);
            ok := TRUE
        ELSE
            oo := contaDummy;
            dd := contaDummy; 
            vv := 0;
            tp := saqueCorrente;
            ok := FALSE
        END
    END;
    
ok, ftCartao <-- consultarFaturasCartao(ct) = 
    VAR
        cartaoAtivo, tipo
    IN 
        cartaoAtivo := i_cartoes(ct);
        ftCartao := (0..maxFatura)*{FALSE};
        tipo := i_tipoCartao(ct);
        
        IF 
            cartaoAtivo = TRUE & tipo = credito & ct /= cartaoDummy
        THEN
            
            VAR ii IN
            ii := 0;
            WHILE ii <= maxFatura DO
                VAR 
                    atual, cartaoFatura 
                IN 
                    atual := i_faturas(ii);
                    cartaoFatura := i_faturaCartao(ii);
                    
                    IF 
                        atual = TRUE & cartaoFatura = ct
                    THEN
                        ftCartao(ii) := TRUE
                    END;
                    
                    ii := ii + 1
                END
            INVARIANT
                ii : 0..(maxFatura+1) &
                i_faturas : (0..maxFatura) --> BOOL &
                faturas = dom(i_faturas |> {TRUE}) &
                ftCartao : (0..maxFatura) --> BOOL &
                dom(ftCartao |> {TRUE}) = ((0..ii-1) /\ dom(i_faturas |> {TRUE}) /\ dom(i_faturaCartao |> {ct}))
            VARIANT
                maxFatura - ii + 1
            END
            END;
            
            ok := TRUE
        ELSE
            ok := FALSE
        END
        
    END;
    
ok, ct, tt, oo, st, atual <-- consultarFatura(ff) =
    VAR 
        faturaAtiva, faturaAtual
    IN 
        faturaAtiva := i_faturas(ff);
        
        IF 
            faturaAtiva = TRUE 
        THEN
            ct := i_faturaCartao(ff);
            tt := i_totalFatura(ff);
            oo := i_faturaOrdem(ff);
            st := i_statusFatura(ff);
            faturaAtual := i_faturaAtual(ct);
            atual := bool(faturaAtual = ff);
            ok := TRUE
        ELSE
            ct := cartaoDummy;
            tt := 0;
            oo := 0;
            st := aberta;
            atual := FALSE;
            ok := FALSE
        END
    END;
    
ok, vf <-- consultarValorFatura(ct) =
    VAR 
        cartaoAtivo, tipoCartao
    IN
        cartaoAtivo := i_cartoes(ct);
        tipoCartao := i_tipoCartao(ct);
        
        IF 
            cartaoAtivo = TRUE & tipoCartao = credito & ct /= cartaoDummy
        THEN
            VAR 
                faturaAtual 
            IN
                faturaAtual := i_faturaAtual(ct);
                vf := i_totalFatura(faturaAtual);
                ok := TRUE
            END
        ELSE
            vf := 0;
            ok := FALSE
        END
    END;
    
    
ok, cts <-- consultarCartoesConta(cc) = 
    VAR
        contaAtiva
    IN
        contaAtiva := i_contas(cc);
        cts := (0..maxCartao)*{FALSE};
        
        IF
            contaAtiva = ativa & cc /= contaDummy
        THEN
            VAR ii IN 
                ii := 0;
                WHILE ii <= maxCartao DO
                    VAR 
                        atual, titularCartao 
                    IN 
                        atual := i_cartoes(ii);
                        titularCartao := i_titular(ii);
                        IF 
                            atual = TRUE & titularCartao = cc
                        THEN
                            cts(ii) := TRUE
                        END;
                    ii := ii + 1
                    END
            INVARIANT
                ii : 0..(maxCartao+1) &
                i_cartoes : CARTAO --> BOOL &
                cartoes = dom(i_cartoes |> {TRUE}) &
                i_titular : CARTAO --> CONTA &
                titular = cartoes <| i_titular &
                cts : (0..maxCartao) --> BOOL &
                dom(cts |> {TRUE}) = ((0..ii-1) /\ dom((dom(i_cartoes |> {TRUE})) <| i_titular |> {cc}))
            VARIANT
                maxCartao - ii + 1
            END
         END;
         ok := TRUE
        ELSE
            ok := FALSE
        END
    END;
    
ok, tipo, ll, llMax, block <-- consultarCartao(ct) =
    VAR 
        cartaoAtivo, tipoCartao
    IN
        cartaoAtivo := i_cartoes(ct);
        tipoCartao := i_tipoCartao(ct);
        
        IF 
            cartaoAtivo = TRUE & ct /= cartaoDummy
        THEN
            IF 
                tipoCartao = credito
            THEN
                ll := i_limite(ct);
                llMax := i_limiteMax(ct)
            ELSE
                ll := 0;
                llMax := 0
            END;
            tipo := tipoCartao;
            block := i_bloqueados(ct);
            ok := TRUE
        ELSE
            ll := 0; 
            llMax := 0;
            block := FALSE; 
            ok := FALSE
        END
    END;

ok, prox <-- proximaConta =
    IF
        tamConta < maxConta
    THEN
        prox := tamConta + 1;
        ok := TRUE
    ELSE
        prox := contaDummy;
        ok := FALSE
    END;
    
ok, prox <-- proximoCartao =
    IF
        tamCartao < maxCartao
    THEN
        VAR ii, atual IN
                ii := 1;
                atual := i_cartoes(ii);
                
                WHILE ii < maxCartao & atual = TRUE DO
                    ii := ii + 1;
                    atual := i_cartoes(ii)

                INVARIANT 
                    ii : 1..maxCartao &   
                    i_cartoes : CARTAO --> BOOL &
                    cartoes = dom(i_cartoes |> {TRUE}) &
                    (1..ii-1) <: dom(i_cartoes |> {TRUE}) &
                    (atual = FALSE => (ii : CARTAO & ii /: cartoes))
                VARIANT 
                    maxCartao - ii
                 END;
                 prox := ii
          END;
        
        ok := TRUE
    ELSE
        prox := cartaoDummy;
        ok := FALSE
    END

END