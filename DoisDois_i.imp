IMPLEMENTATION DoisDois_i
REFINES DoisDois
    
CONCRETE_CONSTANTS 
    ativa, removida, livre, STATUSCONTA
    
PROPERTIES
    ativa : NAT & removida : NAT & livre : NAT &
    ativa /= livre & ativa /= removida & removida /= livre &
    STATUSCONTA <: NAT
     
VALUES  
    maxConta = 50;
    maxCartao = 100;
    maxFatura = 100;
    maxTransacao = 200;
    CONTA = 0..maxConta;
    TRANSACAO = 0..maxTransacao;
    FATURA = 0..maxFatura;
    CARTAO = 0..maxCartao;
    taxaRendimento = 2;
    jurosFatura = 2; 
    maxParcelas = 10;
    limiteMaxPadrao = 15;
    saqueMinCorrente = 30;
    saqueMinPoupanca = 20;
    limitePix = 50;
    contaDummy = 0;
    cartaoDummy = 0;
    faturaDummy = 0;
    transacaoDummy = 0;
    ativa = 1;
    removida = 2;
    livre = 0;
    STATUSCONTA = livre..removida
    
CONCRETE_VARIABLES
    i_contas, i_cartoes, i_faturas, i_transacoes,
    i_bloqueados, i_saldoCorrente, i_saldoPoupanca,
    i_valorTransacoes, i_tipoTransacoes, i_tipoCartao,
    i_limite, i_limiteMax, i_faturaOrdem,
    i_statusFatura, i_totalFatura, i_titular,
    i_faturaAtual, i_origem, i_destino, i_faturaCartao,
    tamFatura, tamTransacao
INVARIANT

    i_contas: CONTA --> STATUSCONTA &
    contas = dom(i_contas |> {ativa}) &
    contasRemovidas = dom(i_contas |> {removida}) &
    
    i_cartoes : CARTAO --> BOOL &
    cartoes = dom(i_cartoes |> {TRUE}) &
    
    i_faturas : FATURA --> BOOL &
    faturas = dom(i_faturas |> {TRUE}) &
    
    i_transacoes : TRANSACAO --> BOOL &
    transacoes = dom(i_transacoes |> {TRUE}) &
    
    i_bloqueados : CARTAO --> BOOL &
    bloqueados = dom(i_bloqueados |> {TRUE}) &
    dom(i_bloqueados |> {TRUE}) <: cartoes &
    
    
    i_saldoCorrente : CONTA --> NAT &
    saldoCorrente = contas <| i_saldoCorrente &
    i_saldoPoupanca : CONTA --> NAT &
    saldoPoupanca = contas <| i_saldoPoupanca &
   
    i_origem : TRANSACAO --> CONTA &
    origemTransacoes = transacoes <| i_origem &
    i_destino : TRANSACAO --> CONTA &
    destinoTransacoes = transacoes <| i_destino &
    
    i_valorTransacoes : TRANSACAO --> NAT &
    i_tipoTransacoes : TRANSACAO --> TIPOTRANSACAO &
    valorTransacoes = transacoes <| i_valorTransacoes &
    tipoTransacoes  = transacoes <| i_tipoTransacoes &
    
    // mesmo problema de i_origem/i_destino
    i_titular : CARTAO --> CONTA &
    titular = cartoes <| i_titular &
    
    i_tipoCartao : CARTAO --> TIPOCARTAO &
    tipoCartao = cartoes <| i_tipoCartao &
    
    i_limite    : CARTAO --> NAT &
    i_limiteMax : CARTAO --> NAT &
    limite = creditos <| i_limite &
    limiteMax = creditos <| i_limiteMax &
    
    i_statusFatura : FATURA --> STATUSFATURA &
    i_totalFatura : FATURA --> NAT &
    statusFatura = faturas <| i_statusFatura &
    totalFatura = faturas <| i_totalFatura &
   
    i_faturaAtual : CARTAO --> FATURA &
    creditos <| i_faturaAtual : CARTAO >+> FATURA &
    faturaAtual = creditos <| i_faturaAtual &
    
    i_faturaCartao: FATURA --> CARTAO &
    faturaCartao =  (faturas <| i_faturaCartao) |> creditos &
    
    i_faturaOrdem : FATURA --> NAT &
    faturaOrdem = faturas <| i_faturaOrdem &
    
    /*auxiliares*/
    tamFatura : NAT & tamFatura = card(faturas) &
    tamTransacao : NAT & tamTransacao = card(transacoes)
    
DEFINITIONS     
    creditos == (tipoCartao~[{credito}])            
    
INITIALISATION
    i_contas := CONTA*{livre};
    i_cartoes := CARTAO*{FALSE};
    i_faturas := FATURA*{FALSE};
    i_transacoes := TRANSACAO*{FALSE};
    i_saldoCorrente := CONTA*{0};
    i_saldoPoupanca := CONTA*{0};
    i_bloqueados := CARTAO*{FALSE};
    i_valorTransacoes := TRANSACAO*{0};
    // crime, mas só pensei nisso para não mexer na máquina
    i_tipoTransacoes := TRANSACAO*{depositoCorrente};
    i_tipoCartao := CARTAO*{debito};
    i_limite := CARTAO*{0};
    i_limiteMax := CARTAO * {limiteMaxPadrao};
    i_statusFatura := FATURA*{aberta};
    i_totalFatura := FATURA*{0};
    i_titular := CARTAO*{contaDummy};
    i_faturaAtual := CARTAO*{faturaDummy};
    i_origem := TRANSACAO*{contaDummy};
    i_destino := TRANSACAO*{contaDummy};
    i_faturaCartao := FATURA*{cartaoDummy};
    i_faturaOrdem := FATURA*{0};
    tamFatura := 0;
    tamTransacao := 0
    

OPERATIONS
adicionarConta(cc) = 
    BEGIN
        i_contas(cc) := ativa;
        i_saldoCorrente(cc) := 0;
        i_saldoPoupanca(cc) := 0 
    END;

depositarCorrente(cc, valor) = skip;

depositarPoupanca(cc, valor) = skip;

sacarCorrente(cc, valor) = 
    BEGIN
         i_saldoCorrente(cc) := i_saldoCorrente(cc) -  valor;
         VAR ii, atual IN
                ii := 0;
                atual := i_transacoes(ii);
                
                WHILE ii <= maxTransacao & atual = TRUE DO
                    ii := ii + 1;
                    IF ii <= maxTransacao
                    THEN
                        atual := i_transacoes(ii)
                    ELSE 
                        atual := FALSE
                    END
                INVARIANT 
                    ii : 0..(maxTransacao + 1) &   
                    i_transacoes : TRANSACAO --> BOOL &
                    i_origem : TRANSACAO --> CONTA &
                    i_destino : TRANSACAO --> CONTA &
                    i_valorTransacoes : TRANSACAO --> NAT &
                    i_tipoTransacoes : TRANSACAO --> TIPOTRANSACAO &
                    (ii <= maxTransacao => atual = i_transacoes(ii)) &
                    FALSE /: i_transacoes[0..(ii-1)]
                VARIANT 
                    maxTransacao + 1 - ii
                END;
                
                i_transacoes(ii) := TRUE;
                i_origem(ii) := cc;
                i_destino(ii) := cc;
                i_valorTransacoes(ii) := valor;
                i_tipoTransacoes(ii) := saqueCorrente;
                tamTransacao := tamTransacao + 1
                
           END
        
    END;
 
sacarPoupanca(cc, valor) = 
    BEGIN
         i_saldoPoupanca(cc) := i_saldoPoupanca(cc) -  valor;
         i_saldoCorrente(cc) := i_saldoCorrente(cc) + valor;
         VAR ii, atual IN
                ii := 0;
                atual := i_transacoes(ii);
                
                WHILE ii <= maxTransacao & atual = TRUE DO
                    ii := ii + 1;
                    IF ii <= maxTransacao
                    THEN
                        atual := i_transacoes(ii)
                    ELSE 
                        atual := FALSE
                    END
                INVARIANT 
                    ii : 0..(maxTransacao + 1) &   
                    i_transacoes : TRANSACAO --> BOOL &
                    i_origem : TRANSACAO --> CONTA &
                    i_destino : TRANSACAO --> CONTA &
                    i_valorTransacoes : TRANSACAO --> NAT &
                    i_tipoTransacoes : TRANSACAO --> TIPOTRANSACAO &
                    (ii <= maxTransacao => atual = i_transacoes(ii)) &
                    FALSE /: i_transacoes[0..(ii-1)]
                VARIANT 
                    maxTransacao + 1 - ii
                END;
                
                i_transacoes(ii) := TRUE;
                i_origem(ii) := cc;
                i_destino(ii) := cc;
                i_valorTransacoes(ii) := valor;
                i_tipoTransacoes(ii) := saquePoupanca;
                tamTransacao := tamTransacao + 1
                
           END  
      END;
    
adicionarCartao(ct, tp, cc) =
    BEGIN
        i_cartoes(ct) := TRUE;
        i_tipoCartao(ct) := tp;
        i_titular(ct) := cc;
        IF tp = credito THEN
            
            VAR ii, atual IN
                ii := 0;
                atual := i_faturas(ii);
                
                WHILE ii <= maxFatura & atual = TRUE DO
                    ii := ii + 1;
                    IF ii <= maxFatura THEN
                        atual := i_faturas(ii)
                    ELSE
                        atual := FALSE 
                    END
                INVARIANT 
                    ii : 0..(maxFatura + 1) &
                    maxFatura : dom(i_faturas) &
                    i_faturas : FATURA --> BOOL &
                    i_faturaAtual : CARTAO --> FATURA &
                    i_statusFatura : FATURA --> STATUSFATURA &
                    i_totalFatura : FATURA --> NAT &
                    i_faturaCartao : FATURA --> CARTAO &
                    i_faturaOrdem : FATURA --> NAT &  
                    (ii <= maxFatura => atual = i_faturas(ii)) &
                    FALSE /: i_faturas[0..(ii-1)]
                VARIANT 
                    maxFatura + 1 - ii
                END;
                
                i_faturas(ii) := TRUE;
                tamFatura := tamFatura + 1;
                i_faturaAtual(ct) := ii;
                i_statusFatura(ii) := aberta;
                i_totalFatura(ii) := 0;
                i_faturaCartao(ii) := ct;
                i_faturaOrdem(ii) := 0;
                i_limite(ct) := limiteMaxPadrao;
                i_limiteMax(ct) := limiteMaxPadrao
                    
            END
         END
    END;
    
removerCartao(ct) = 
    VAR tipo IN
        tipo := i_tipoCartao(ct);
        
        i_cartoes(ct) := FALSE;
        
        IF 
            tipo = credito 
        THEN
            VAR ii, fatura, cartao IN
                ii := 0;
                
                WHILE ii <= maxFatura DO
                    fatura := i_faturas(ii);
                    cartao := i_faturaCartao(ii);
                    IF 
                        fatura = TRUE & cartao = ct
                    THEN 
                        i_faturas(ii) := FALSE;
                        tamFatura := tamFatura - 1
                    END; // DO IF INTERNO
                    ii := ii + 1
                INVARIANT
                    ii : 0..(maxFatura + 1) &
                    i_faturas : FATURA --> BOOL &
                    i_statusFatura : FATURA --> STATUSFATURA &
                    i_totalFatura : FATURA --> NAT &
                    i_faturaCartao : FATURA --> CARTAO &
                    i_faturaOrdem : FATURA --> NAT &
                    TRUE /: ran(dom((0..(ii-1) <| i_faturaCartao) |> {ct}) <| i_faturas)
                    // o que espero no final: ran(dom(i_faturaCartao |> {ct}) <| i_faturas) = {FALSE}

                VARIANT
                    maxFatura + 1 - ii
                END 
            END 
        END 
    END;

pagarFatura(cc, ff) = skip;

compraParcelada(co, cd, valor, parcelas) = skip;

pix(co, cd, valor) = skip;

compraDebito(co, cd, valor) = skip;

bloquearCartao(ct) = skip;

desbloquearCartao(ct) = skip;

atualizarLimiteMax(ct, valor) = skip;

atualizarLimite(ct, valor) = skip;

removerConta(cc) = skip;

passarMes = skip;


ccs <-- consultarContas = 
    VAR ii IN
        ii := 0;
        ccs := (0..maxConta) * {FALSE};
        WHILE ii <= maxConta DO
            VAR atual IN atual := i_contas(ii);
            IF 
                atual = ativa
            THEN
                ccs(ii) := TRUE
            END;
            ii := ii + 1
            END
        INVARIANT
            ii : 0..(maxConta+1) &
            i_contas : (0..maxConta) --> STATUSCONTA &
            ccs : 0..maxConta --> BOOL &
            dom(ccs |> {TRUE}) = dom(i_contas |> {ativa}) /\ 0..(ii-1)
        VARIANT
            maxConta - ii + 1
        END
    END;

sc, sp <-- consultarSaldos(cc) = 
    BEGIN 
        sc := i_saldoCorrente(cc);
        sp := i_saldoPoupanca(cc)
    END;
    

ok <-- pre_adicionarConta(cc) =
    VAR
        status
    IN
        status := i_contas(cc);
        ok := bool(status = livre)
    END;
    
ok <-- pre_depositarCorrente(cc, valor) = skip;

ok <-- pre_depositarPoupanca(cc, valor) = skip;

ok <-- pre_sacarCorrente(cc, valor) = 
    VAR 
        statusConta, saldoCorrente
    IN
        statusConta := i_contas(cc);
        saldoCorrente := i_saldoCorrente(cc);
        
        IF 
            statusConta = ativa & valor >= saqueMinCorrente &
            valor <= saldoCorrente & tamTransacao < maxTransacao &
            valor >= 1
        THEN
            ok := TRUE
        ELSE
            ok := FALSE
        END
    END;

ok <-- pre_sacarPoupanca(cc, valor) = 
    VAR 
        statusConta, saldoPoupanca, saldoCorrente, total
    IN
        statusConta := i_contas(cc);
        saldoPoupanca := i_saldoPoupanca(cc);
        saldoCorrente := i_saldoCorrente(cc);
        total := saldoCorrente + valor;
        
        IF 
            statusConta = ativa & valor >= saqueMinPoupanca &
            valor <= saldoPoupanca & tamTransacao < maxTransacao &
            valor >= 1 & total <= MAXINT
        THEN
            ok := TRUE
        ELSE
            ok := FALSE
        END
    END;    

ok <-- pre_adicionarCartao(ct, tp, cc) = 
    VAR 
        cartaoLivre,
        statusConta, statusCartao,
        cartaoDuplicado, temFatura
    IN 
        // verificar se conta é ativa e se cartão já foi adicionado
        statusConta := i_contas(cc) ;
        statusCartao := i_cartoes(ct);
        cartaoLivre := bool(statusCartao = FALSE);
        temFatura := bool(tp = debito or tamFatura < maxFatura);
        
        IF 
            tp = credito & cartaoLivre = TRUE & statusConta = ativa & temFatura = TRUE
        THEN
        
            // verificar se titular já tem um cartão desse tipo
            cartaoDuplicado := FALSE;
            VAR ii IN
                ii := 0;
                
                WHILE 
                    ii <= maxCartao & ii <= maxConta & cartaoDuplicado = FALSE 
                DO
                    VAR 
                        cartaoAtual, titularAtual, tipoAtual
                    IN
                        cartaoAtual := i_cartoes(ii);
                        titularAtual := i_titular(ii);
                        tipoAtual := i_tipoCartao(ii);

                        IF cartaoAtual = TRUE & titularAtual = cc & tipoAtual = tp 
                        THEN
                            cartaoDuplicado := TRUE
                        END
                    END;
                ii := ii + 1
                INVARIANT 
                    ii : NAT & ii <= (maxConta + 1) & ii <= (maxCartao + 1) &
                    i_cartoes : CARTAO --> BOOL &
                    i_titular : CARTAO --> CONTA &
                    i_tipoCartao : CARTAO --> TIPOCARTAO &
                    (cartaoDuplicado = FALSE) => 
                    (!jj.(jj:0..ii-1 => not(i_cartoes(jj) = TRUE & i_titular(jj) = cc & i_tipoCartao(jj) = tp)))
                VARIANT
                    (maxCartao + 1) - ii
                END;
                
                IF 
                    cartaoDuplicado = TRUE
                THEN
                    ok := FALSE
                ELSE
                    ok := TRUE
                END
                
                
             END
                
           ELSIF 
               statusConta = ativa & cartaoLivre = TRUE 
           THEN
                ok := TRUE
           ELSE
                ok := FALSE
           END  
    END;
    

ok <-- pre_removerCartao(ct) = 
    VAR 
        cartaoAtivo, tipoCartao, pagas
    IN 
        cartaoAtivo := i_cartoes(ct);
        tipoCartao := i_tipoCartao(ct);
        
       IF 
           cartaoAtivo = TRUE & tipoCartao = credito
       THEN
        
            VAR ii, fatura, faturaCartao, statusFatura, totalFatura
            IN 
                ii := 0;
                pagas := TRUE;
                WHILE ii <= maxFatura & pagas = TRUE DO
                    fatura := i_faturas(ii);
                    faturaCartao := i_faturaCartao(ii);
                    statusFatura := i_statusFatura(ii);
                    totalFatura := i_totalFatura(ii);
                    
                    IF fatura = TRUE & faturaCartao = ct & statusFatura /= paga & totalFatura /= 0
                    THEN 
                       pagas := FALSE
                    END;
                    ii := ii + 1
                INVARIANT
                    ii : 0..(maxFatura + 1) &
                    i_faturaCartao : FATURA --> CARTAO &
                    i_statusFatura : FATURA --> STATUSFATURA &
                    i_totalFatura : FATURA --> NAT &
                    pagas = TRUE <=> (dom(((0..(ii-1)) <| i_faturas |> {TRUE})) /\ dom(i_faturaCartao |> {ct}) <: dom(i_statusFatura |> {paga}) \/ dom(i_totalFatura |> {0}))
                VARIANT 
                    maxFatura - ii + 1
                    
                END // WHILE
            END;
            
            ok := pagas
        ELSE 
            ok := cartaoAtivo
        END
            
        END;

ok <-- pre_pagarFatura(cc, ff) = skip;

ok <-- pre_compraParcelada(co, cd, valor, parcelas) = skip;

ok <-- pre_pix(co, cd, valor) = skip;

ok <-- pre_compraDebito(co, cd, valor) = skip;

ok <-- pre_historico(cc) = skip;

ok <-- pre_consultarSaldos(cc) = 
    VAR 
        statusConta
    IN
        statusConta := i_contas(cc);
        
        IF 
            statusConta = ativa
        THEN
            ok := TRUE
        ELSE
            ok := FALSE
        END
        
    END;

ok <-- pre_bloquearCartao(ct) = skip;

ok <-- pre_desbloquearCartao(ct) = skip;

ok <-- pre_atualizarLimiteMax(ct, valor) = skip;

ok <-- pre_atualizarLimite(ct, valor) = skip;

ok <-- pre_consultarValorFatura(ct) = skip;

ok <-- pre_consultarCartoesConta(cc) = skip;

ok <-- pre_consultarLimiteDisponivel(ct) = skip;

ok <-- pre_consultarLimiteMax(ct) = skip;

ok <-- pre_consultarTransacao(tt) = skip;

ok <-- pre_removerConta(cc) = skip;

ok <-- pre_consultarFaturasCartao(ct) = skip;

ok <-- pre_consultarFatura(ff) = skip;

ok <-- pre_passarMes = skip
    
END